#
# JBoss, Home of Professional Open Source.
# Copyright 2011, Red Hat, Inc., and individual contributors
# as indicated by the @author tags. See the copyright.txt file in the
# distribution for a full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#

RULE transition at StartContextImpl.failed
CLASS org.jboss.msc.service.ServiceControllerImpl$StartContextImpl
METHOD failed
AT EXIT
IF TRUE
DO
   signalWake("failCountPlusPlus1", true);
   signalWake("failCountPlusPlus2", true);
ENDRULE

RULE transition at StartTask.startFailed
CLASS org.jboss.msc.service.ServiceControllerImpl$StartTask
METHOD startFailed
AT EXIT
IF TRUE
DO
   signalWake("failCountPlusPlus1", true);
   signalWake("failCountPlusPlus2", true);
ENDRULE

# hold listenerTask just to make sure asyncTasks is > 0 and transition won't
# occur inside StartContextImpl.failed/StartTask.startFailed
RULE ListenerTask
CLASS org.jboss.msc.service.ServiceControllerImpl$ListenerTask
METHOD invokeListener
HELPER org.jboss.msc.racecondition.NullHelper
AT ENTRY
IF !isNull($3) && $3.toString().endsWith("START_INITIATING to STARTING")
DO
   debug("listenerTask waiting for failCont++"),
   waitFor("failCountPlusPlus1", 1000000),
   # hold transition from occurring until new dependent has been added
   debug("wait for ServiceControllerImpl.newDependent"),
   waitFor("newDependent completed", 100000),
   debug("proceed with transition to START_FAILED")
ENDRULE

RULE ServiceRegistrationImpl.addDependent
CLASS org.jboss.msc.service.ServiceRegistrationImpl
METHOD addDependent
AT ENTRY
IF TRUE
DO
   # wait for failure to occur
   debug("waiting for failure on dependency"),
   waitFor("failCountPlusPlus2", 1000000),
   debug("proceeding with ServiceRegistrationImpl.addDependent");
ENDRULE

RULE ServiceControllerImpl.newDependent
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD newDependent
AT EXIT
IF TRUE
DO
   # proceed with dependency transition to START_FAILED state
   debug("waking failed service transition"),
   signalWake("newDependent completed", true),
   debug("proceeding with ServiceRegistrationImpl.addDependent");
ENDRULE

RULE Increment ServiceADepFailed counter
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD dependencyFailed
AT ENTRY
IF $0.primaryRegistration.name.toString().indexOf("A") != -1
DO
   #increment counter
   debug("incrementing ServiceADepFailed counter "),
   incrementCounter("ServiceADepFailed");
ENDRULE

RULE Set test counts
CLASS org.jboss.msc.racecondition.NewDependentOfFailingServiceTestCase
METHOD test
HELPER org.jboss.msc.racecondition.NullHelper
# FIXME correct version is AT INVOKE assertEquals... however, it is working like an after invoke, I don't know why
AFTER INVOKE assertController ALL
IF !isNull($0.serviceAController)
DO
   debug("setting value of test serviceAFailCount and of serviceADepFailedInvocations " + readCounter("ServiceAFailCount")),
   $0.serviceADepFailedInvocations = readCounter("ServiceADepFailed"),
   #debug("look: "+ $0.serviceAController.failCount);
   $0.serviceAFailCount = getFailCountValue($0.serviceAController);
ENDRULE